{"ast":null,"code":"// import usePlacesAutocomplete, {\n//     getGeocode,\n//     getLatLng,\n//   } from \"use-places-autocomplete\";\n//   import useOnclickOutside from \"react-cool-onclickoutside\";\n//   export default function PlacesAutocomplete(props) {\n//     const {\n//       ready,\n//       value,\n//       suggestions: { status, data },\n//       setValue,\n//       clearSuggestions,\n//     } = usePlacesAutocomplete({\n//       requestOptions: {\n//         /* Define search scope here */\n//       },\n//       debounce: 300,\n//     });\n//     const ref = useOnclickOutside(() => {\n//       // When user clicks outside of the component, we can dismiss\n//       // the searched suggestions by calling this method\n//       clearSuggestions();\n//     });\n//     const handleInput = (e) => {\n//         // Update the keyword of the input element\n//         props.setEventLocationProp(e.target.value);\n//     };\n//     const handleSelect = ({ description }) => () => {\n//         // When user selects a place, we can replace the keyword without request data from API\n//         // by setting the second parameter to \"false\"\n//         setValue(description, false);\n//         clearSuggestions();\n//         // Get latitude and longitude via utility functions\n//         getGeocode({ address: description })\n//           .then((results) => getLatLng(results[0]))\n//           .then(({ lat, lng }) => {\n//             console.log(\"📍 Coordinates: \", { lat, lng });\n//           })\n//           .catch((error) => {\n//             console.log(\"😱 Error: \", error);\n//         });\n//     };\n//     const renderSuggestions = () =>\n//         data.map((suggestion) => {\n//           const {\n//             place_id,\n//             structured_formatting: { main_text, secondary_text },\n//         } = suggestion;\n//         return (\n//             <li key={place_id} onClick={handleSelect(suggestion)}>\n//               <strong>{main_text}</strong> <small>{secondary_text}</small>\n//             </li>\n//         );\n//     });\n//     return (\n//         <div ref={ref}>\n//             <div>\n//                 Location\n//             </div>  \n//           <input\n//             type='text'\n//             value={value}\n//             onChange={handleInput}\n//             disabled={!ready}\n//             placeholder=\"Set event Location\"\n//           />\n//           {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n//           {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n//         </div>\n//     );\n// };","map":{"version":3,"sources":["/home/lorelai/Schreibtisch/Ironhack/w8 Project3/Collective-App/client/src/components/autocompleteBar.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import usePlacesAutocomplete, {\n//     getGeocode,\n//     getLatLng,\n//   } from \"use-places-autocomplete\";\n//   import useOnclickOutside from \"react-cool-onclickoutside\";\n\n  \n//   export default function PlacesAutocomplete(props) {\n    \n//     const {\n//       ready,\n//       value,\n//       suggestions: { status, data },\n//       setValue,\n//       clearSuggestions,\n//     } = usePlacesAutocomplete({\n//       requestOptions: {\n//         /* Define search scope here */\n//       },\n//       debounce: 300,\n//     });\n\n//     const ref = useOnclickOutside(() => {\n//       // When user clicks outside of the component, we can dismiss\n//       // the searched suggestions by calling this method\n//       clearSuggestions();\n//     });\n\n//     const handleInput = (e) => {\n//         // Update the keyword of the input element\n//         props.setEventLocationProp(e.target.value);\n//     };\n    \n//     const handleSelect = ({ description }) => () => {\n//         // When user selects a place, we can replace the keyword without request data from API\n//         // by setting the second parameter to \"false\"\n//         setValue(description, false);\n//         clearSuggestions();\n    \n//         // Get latitude and longitude via utility functions\n//         getGeocode({ address: description })\n//           .then((results) => getLatLng(results[0]))\n//           .then(({ lat, lng }) => {\n//             console.log(\"📍 Coordinates: \", { lat, lng });\n//           })\n//           .catch((error) => {\n//             console.log(\"😱 Error: \", error);\n//         });\n//     };\n    \n//     const renderSuggestions = () =>\n//         data.map((suggestion) => {\n//           const {\n//             place_id,\n//             structured_formatting: { main_text, secondary_text },\n//         } = suggestion;\n\n//         return (\n//             <li key={place_id} onClick={handleSelect(suggestion)}>\n//               <strong>{main_text}</strong> <small>{secondary_text}</small>\n//             </li>\n//         );\n\n//     });\n    \n//     return (\n//         <div ref={ref}>\n//             <div>\n//                 Location\n//             </div>  \n//           <input\n//             type='text'\n//             value={value}\n//             onChange={handleInput}\n//             disabled={!ready}\n//             placeholder=\"Set event Location\"\n//           />\n//           {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n//           {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n//         </div>\n//     );\n// };\n"]},"metadata":{},"sourceType":"module"}