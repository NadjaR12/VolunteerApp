{"ast":null,"code":"var _jsxFileName = \"/home/lorelai/Schreibtisch/WebDev/Collective-App/client/src/context/auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://volunteer-project-rs.herokuapp.com/';\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  _s();\n\n  const [admin, setAdmin] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const storeToken = token => {\n    // store this token in local storage\n    localStorage.setItem('authToken', token);\n  };\n\n  const removeToken = () => {\n    // Upon logout, remove the token from the localStorage\n    localStorage.removeItem(\"authToken\");\n  };\n\n  const logoutAdmin = () => {\n    // update the state\n    //removeToken()\n    setIsLoggedIn(false);\n    setAdmin(null);\n  };\n\n  const authenticateAdmin = () => {\n    // check local storage\n    const storedToken = localStorage.getItem('authToken');\n\n    if (storedToken) {\n      return axios.get(`/api/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        const admin = response.data;\n        setAdmin(admin);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n      }).catch(err => {\n        // the token is invalid\n        setIsLoggedIn(false);\n        setAdmin(null);\n        setIsLoading(false);\n      });\n    } else {\n      // there is no token in local storage\n      setIsLoading(false);\n      setIsLoggedIn(false);\n      setAdmin(null);\n    }\n  };\n\n  useEffect(() => {\n    // check if we have an auth token stored\n    authenticateAdmin();\n    authenticateAdmin();\n    logoutAdmin();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      admin,\n      isLoading,\n      storeToken,\n      authenticateAdmin,\n      logoutAdmin\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AuthProviderWrapper, \"JuBJ59V09+C8vyAxQa4T5S8zdMQ=\");\n\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"sources":["/home/lorelai/Schreibtisch/WebDev/Collective-App/client/src/context/auth.js"],"names":["React","useState","useEffect","axios","API_URL","AuthContext","createContext","AuthProviderWrapper","props","admin","setAdmin","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","storeToken","token","localStorage","setItem","removeToken","removeItem","logoutAdmin","authenticateAdmin","storedToken","getItem","get","headers","Authorization","then","response","data","catch","err","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,MAAMC,OAAO,GAAC,6CAAd;AACA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAEnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMc,UAAU,GAAGC,KAAK,IAAI;AAC3B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,KAAlC;AACA,GAHD;;AAKA,QAAMG,WAAW,GAAG,MAAM;AACzB;AACAF,IAAAA,YAAY,CAACG,UAAb,CAAwB,WAAxB;AACA,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAAM;AACzB;AACA;AACAT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,GALD;;AAOA,QAAMY,iBAAiB,GAAG,MAAM;AAC/B;AACA,UAAMC,WAAW,GAAGN,YAAY,CAACO,OAAb,CAAqB,WAArB,CAApB;;AACA,QAAID,WAAJ,EAAiB;AAChB,aAAOpB,KAAK,CAACsB,GAAN,CAAW,kBAAX,EAA8B;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASJ,WAAY;AAAvC;AAAX,OAA9B,EACLK,IADK,CACAC,QAAQ,IAAI;AACjB,cAAMpB,KAAK,GAAGoB,QAAQ,CAACC,IAAvB;AACApB,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,OANK,EAOLiB,KAPK,CAOCC,GAAG,IAAI;AACb;AACApB,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,OAZK,CAAP;AAaA,KAdD,MAcO;AACN;AACAA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD,GAvBD;;AAyBAR,EAAAA,SAAS,CAAC,MAAM;AACf;AACAoB,IAAAA,iBAAiB;AACjBA,IAAAA,iBAAiB;AACjBD,IAAAA,WAAW;AACX,GALQ,EAKN,EALM,CAAT;AAOA,sBACC,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEV,MAAAA,UAAF;AAAcF,MAAAA,KAAd;AAAqBI,MAAAA,SAArB;AAAgCE,MAAAA,UAAhC;AAA4CO,MAAAA,iBAA5C;AAA+DD,MAAAA;AAA/D,KAA7B;AAAA,cACEb,KAAK,CAACyB;AADR;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GA5DQ1B,mB;;KAAAA,mB;AA+DT,SAASA,mBAAT,EAA8BF,WAA9B","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n\n\nconst API_URL='https://volunteer-project-rs.herokuapp.com/';\nconst AuthContext = React.createContext()\n\nfunction AuthProviderWrapper(props) {\n\n\tconst [admin, setAdmin] = useState(null)\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tconst storeToken = token => {\n\t\t// store this token in local storage\n\t\tlocalStorage.setItem('authToken', token)\n\t}\n\n\tconst removeToken = () => {                    \n\t\t// Upon logout, remove the token from the localStorage\n\t\tlocalStorage.removeItem(\"authToken\");\n\t}\n\n\tconst logoutAdmin = () => {\n\t\t// update the state\n\t\t//removeToken()\n\t\tsetIsLoggedIn(false)\n\t\tsetAdmin(null)\n\t}\n\n\tconst authenticateAdmin = () => {\n\t\t// check local storage\n\t\tconst storedToken = localStorage.getItem('authToken')\n\t\tif (storedToken) {\n\t\t\treturn axios.get(`/api/auth/verify`, { headers: { Authorization: `Bearer ${storedToken}` } })\n\t\t\t\t.then(response => {\n\t\t\t\t\tconst admin = response.data\n\t\t\t\t\tsetAdmin(admin)\n\t\t\t\t\tsetIsLoggedIn(true)\n\t\t\t\t\tsetIsLoading(false)\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\t// the token is invalid\n\t\t\t\t\tsetIsLoggedIn(false)\n\t\t\t\t\tsetAdmin(null)\n\t\t\t\t\tsetIsLoading(false)\n\t\t\t\t})\n\t\t} else {\n\t\t\t// there is no token in local storage\n\t\t\tsetIsLoading(false)\n\t\t\tsetIsLoggedIn(false)\n\t\t\tsetAdmin(null)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t// check if we have an auth token stored\n\t\tauthenticateAdmin()\n\t\tauthenticateAdmin()\n\t\tlogoutAdmin() \n\t}, [])\n\n\treturn (\n\t\t<AuthContext.Provider value={{ isLoggedIn, admin, isLoading, storeToken, authenticateAdmin, logoutAdmin }}>\n\t\t\t{props.children}\n\t\t</AuthContext.Provider>\n\t)\n}\n\n\nexport { AuthProviderWrapper, AuthContext }\n\n"]},"metadata":{},"sourceType":"module"}